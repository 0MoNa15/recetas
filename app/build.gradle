plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
    id 'kotlin-parcelize'
    id "org.jetbrains.kotlin.plugin.serialization" version "1.6.10"
}
jacoco {
    toolVersion = '0.8.7'
}
android {
    namespace 'com.mona15.recetas'
    compileSdk 34

    defaultConfig {
        applicationId "com.mona15.recetas"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_ui_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    tasks.withType(Test).configureEach {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    tasks.register('jacocoTestReport', JacocoReport) {
        dependsOn('testDebugUnitTest', ':domain:testDebugUnitTest', ':infraestructure:testDebugUnitTest')

        def domain = project(':domain')
        def infraestructure = project(':infraestructure')

        sourceDirectories.setFrom(files([fileTree(dir: "${domain.projectDir}/src/main/java"), fileTree(dir: "${infraestructure.projectDir}/src/main/java")]))
        classDirectories.setFrom(files([fileTree(dir: "${domain.buildDir}/tmp/kotlin-classes/debug"), fileTree(dir: "${infraestructure.buildDir}/tmp/kotlin-classes/debug")]))

        def executionFiles = layout.files(fileTree(dir: "$domain.buildDir", includes: ["jacoco/testDebugUnitTest.exec"]), fileTree(dir: "$infraestructure.buildDir", includes: ["jacoco/testDebugUnitTest.exec"]))
        executionData.setFrom(executionFiles.asFileTree)
    }
}

dependencies {
    implementation project(':domain')
    implementation project(':infraestructure')

    // Compose
    implementation composeUi
    implementation composeMaterial
    implementation composeUiPreview
    debugImplementation composeDebug
    implementation activityCompose

    // View Model
    implementation viewModelKtx
    implementation lifecycleKtx

    // Dependency Injection
    api hiltDi
    kapt hiltCompiler
    kapt hiltCompilerViewModel
    implementation hiltNavigationCompose

    // Test
    androidTestImplementation expressoTest
    androidTestImplementation composeTest
    androidTestImplementation runnerTest
    androidTestImplementation extTest

    debugImplementation composeTestManifest
    
    testImplementation junit
    testImplementation coreTesting
    testImplementation mockito
    testImplementation roboelectric
    testImplementation coroutinesTest
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3"
    testImplementation "io.mockk:mockk:1.12.2"


    // Coil
    implementation coil

    implementation serialization

    // Map
    implementation googlemap_compose
    implementation googlemap_utils
    implementation playservices_gsm
}